@using MicUI.WorkManagement.Models.ViewModels;
@model WorkDefinitionViewModel
@{
    ViewBag.Title = BPA.GlobalResources.UI.WorkManagement.Resource_WorkDefinition.display_ApproveTitle;
    bool IsBtnEnabled = true;
    bool IsDisable = Model.IsLevel == 0 ? true : false;
    if (Model.IsLevel == 1 && Model.ChangeRequestStatus == "Yes")
    { IsBtnEnabled = false; }
    if (Model.IsLevel == 0 && Model.ChangeRequestStatus == "Yes")
    { IsBtnEnabled = true; }
    if (Model.IsLevel == 1 && Model.ChangeRequestStatus != "Yes")
    { IsBtnEnabled = true; }
    else
    { IsBtnEnabled = false; }

    @functions {
        object getHtmlAttributes(int UserLevel, string CssClass)
        {
            if (UserLevel != 0)
            {
                return new { disabled = "disabled", @class = CssClass };
            }
            return new
            { @@class = CssClass
            };
        }
    }
}
<div>
    <div class="px-4 py-2 pb-3">
        <div class="row">
            <div class="col-sm-4 col-lg-4">
                <div class="mb-3">
                    @Html.LabelFor(l => l.RequestCreator, new { @class = "form-label" })
                    <p class="form-control">@Model.RequestCreator</p>
                    @Html.HiddenFor(x => x.IsLevel)
                </div>
            </div>
            <div class="col-sm-4 col-lg-4">
                <div class="mb-3">
                    @Html.LabelFor(l => l.ClientName, new { @class = "form-label" })
                    <p class="form-control">@Model.ClientName</p>
                </div>
            </div>
            <div class="col-sm-4 col-lg-4">
                <div class="mb-3">
                    @Html.LabelFor(l => l.ProcessName, new { @class = "form-label" })
                    <p class="form-control">@Model.ProcessName</p>
                </div>
            </div>
            <div class="col-sm-4 col-lg-4">
                <div class="mb-3">
                    @Html.LabelFor(l => l.CampaignName, new { @class = "form-label" })
                    <p class="form-control">@Model.CampaignName</p>
                </div>
            </div>
            <div class="col-sm-4 col-lg-4">
                <div class="mb-3">
                    @Html.LabelFor(l => l.WorkDefinitionName, new { @class = "form-label" })
                    <p class="form-control">@Model.WorkDefinitionName</p>
                </div>
            </div>
            <div class="col-sm-4 col-lg-4">
                <div class="mb-3">
                    @Html.LabelFor(l => l.Location, new { @class = "form-label" })
                    @Html.TextBoxFor(x => x.Location, @getHtmlAttributes(Model.IsLevel, "form-control"))
                </div>
            </div>
            <div class="col-sm-4 col-lg-4">
                <div class="mb-3">
                    @Html.LabelFor(l => l.ShiftWindow, new { @class = "form-label" })
                    @Html.TextBoxFor(d => d.ShiftWindow, @getHtmlAttributes(Model.IsLevel, "form-control"))
                </div>
            </div>
            <div class="col-sm-4 col-lg-4">
                <div class="mb-3">
                    @Html.LabelFor(l => l.PurposeofcreationofWork, new { @class = "form-label" })
                    @(Html.Kendo().MultiSelect().Name("Purposeofcreationofwork").AutoClose(false).Enable(IsDisable)
                        .Placeholder(@BPA.GlobalResources.UI.WorkManagement.Resource_WorkDefinition.display_Select_PurposeofWork)
                        .BindTo(new List<string>() {@BPA.GlobalResources.UI.AppConfiguration.Resources_Campaign.display_WorkManagement  ,
                    @BPA.GlobalResources.UI.AppConfiguration.Resources_Campaign.display_TimeTracking ,
                    @BPA.GlobalResources.UI.AppConfiguration.Resources_Campaign.display_TransactionsMonitoring})
                        .Value(Model.PurposeofcreationofWork)
                        .HtmlAttributes(new { @required = "required", @validationmessage = BPA.GlobalResources.UI.WorkManagement.Resource_WorkDefinition.required_Purpuse, @class = "formSelect" }))
                </div>
            </div>
            <div class="col-sm-4 col-lg-4">
                <div class="mb-3">
                    @Html.LabelFor(d => d.BusinessJustifications, new { @class = "form-label" })
                    @Html.TextAreaFor(x => x.BusinessJustifications, @getHtmlAttributes(Model.IsLevel, "form-control"))
                </div>
            </div>
            <div class="col-sm-4 col-lg-4">
                <div class="mb-3">
                    @Html.LabelFor(d => d.TargetUsers, new { @class = "form-label" })
                    @Html.TextAreaFor(x => x.BusinessJustifications, @getHtmlAttributes(Model.IsLevel, "form-control"))



                </div>
            </div>
            <div class="col-sm-8 col-lg-8">
                <div class="mb-3">
                    <div class="row">
                        <div class="col">
                            @Html.LabelFor(x => x.Q1, new { @class = "form-label" })
                            @Html.TextBoxFor(x => x.Q1, @getHtmlAttributes(Model.IsLevel, "form-control"))
                        </div>
                        <div class="col">
                            @Html.LabelFor(x => x.Q2, new { @class = "form-label" })
                            @Html.TextBoxFor(x => x.Q2, @getHtmlAttributes(Model.IsLevel, "form-control"))
                        </div>
                        <div class="col">
                            @Html.LabelFor(x => x.Q3, new { @class = "form-label" })
                            @Html.TextBoxFor(x => x.Q3, @getHtmlAttributes(Model.IsLevel, "form-control"))
                        </div>
                        <div class="col">
                            @Html.LabelFor(x => x.Y1, new { @class = "form-label" })
                            @Html.TextBoxFor(x => x.Y1, @getHtmlAttributes(Model.IsLevel, "form-control"))
                        </div>
                        <div class="col">
                            @Html.LabelFor(x => x.Y2, new { @class = "form-label" })
                            @Html.TextBoxFor(x => x.Y2, @getHtmlAttributes(Model.IsLevel, "form-control"))
                        </div>
                        <div class="col">
                            @Html.LabelFor(x => x.Y3, new { @class = "form-label" })
                            @Html.TextBoxFor(x => x.Y3, @getHtmlAttributes(Model.IsLevel, "form-control"))
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-4 col-lg-4">
                <div class="mb-3">
                    @Html.LabelFor(d => d.KeyBenefits, new { @class = "form-label" })
                    @Html.TextAreaFor(x => x.KeyBenefits, @getHtmlAttributes(Model.IsLevel, "form-control"))
                </div>
            </div>
            <div class="col-sm-4 col-lg-4">
                <div class="mb-3">
                    @Html.LabelFor(a => a.ChangeRequest, new { @class = "form-label" })
                    @{
                        if (Model.IsLevel != 1)
                        {
                            @Html.TextAreaFor(x => x.ChangeRequest, new { disabled = "disabled", @class = "form-control" })
                        }
                        else
                        {
                            @Html.TextAreaFor(x => x.ChangeRequest, new { @class = "form-control" })
                        }
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="k-window-footer text-end">
        @(Html.Kendo().Button().Enable(@IsBtnEnabled).Name("btnAdd").HtmlAttributes(new { type = "button", @class = "btn-primary btn-sm btn" }).Content("Submit").Events(ev => ev.Click("Save_workRequest")))
    </div>
    @Html.HiddenFor(x => x.iApproverId)@Html.HiddenFor(x => x.IsLevel)
</div>
<script>
    var urlPathGetFilterList = '@Url.Action("GetFilterList", "WorkDefinition", new { area = "WorkManagement" })';
    var urlPatheditWorkDefination = '@Url.Action("editWorkDefination", "WorkDefinition", new { area = "WorkManagement" })';
    var urlPathSaveWorkData = '@Url.Action("SaveWorkData", "WorkDefinition", new { area = "WorkManagement" })';
    var urlPathIndex = '@Url.Action("Index", "WorkDefinition", new { area = "WorkManagement" })';
    var urlPathObjectFormula = '@Url.Action("ObjectFormula", "WorkDefinition", new { area = "WorkManagement" })';
    var urlPathCreateRESTControls = '@Url.Action("CreateRESTControls", "WorkDefinition", new { area = "WorkManagement" })';
    var urlPathUpdatePreViewData = '@Url.Action("UpdatePreViewData", "WorkDefinition", new { area = "WorkManagement" })';
    var urlPath_WorkPreview = '@Url.Action("_WorkPreview", "WorkDefinition", new { area = "WorkManagement" })';
    var urlPathSearchView = '@Url.Action("SearchView", "WorkDefinition", new { area = "WorkManagement" })';
    var urlPathApprovalView = '@Url.Action("ApprovalView", "WorkDefinition", new { area = "WorkManagement" })';
    var urlPathGetProcessID = '@Url.Action("GetProcessID", "WorkDefinition", new { area = "WorkManagement" })';
</script>
